"""description of changes

Revision ID: 88e1f2f8d65a
Revises: a94c2f9d7801
Create Date: 2025-10-15 16:42:56.865696

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '88e1f2f8d65a'
down_revision = 'a94c2f9d7801'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(None, 'book_authors', 'books', ['book_id'], ['id'])
    op.create_foreign_key(None, 'book_tags', 'books', ['book_id'], ['id'])
    op.create_foreign_key(None, 'comments', 'books', ['book_id'], ['id'])
    op.add_column('plugins', sa.Column('is_enabled', sa.Boolean(), nullable=True))
    op.drop_column('plugins', 'is_active')
    op.drop_column('plugins', 'updated_at')
    op.drop_column('plugins', 'configuration')
    op.alter_column('ratings', 'rating',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=False)
    op.create_unique_constraint('unique_book_user_rating', 'ratings', ['book_id', 'user_id'])
    op.create_foreign_key(None, 'ratings', 'books', ['book_id'], ['id'])
    op.alter_column('tags', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_column('tags', 'created_at')
    op.drop_column('tags', 'description')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=120),
               type_=sa.String(length=100),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=120),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=80),
               existing_nullable=False)
    op.add_column('tags', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('tags', 'name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_constraint(None, 'ratings', type_='foreignkey')
    op.drop_constraint('unique_book_user_rating', 'ratings', type_='unique')
    op.alter_column('ratings', 'rating',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.add_column('plugins', sa.Column('configuration', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('plugins', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('plugins', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('plugins', 'is_enabled')
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.drop_constraint(None, 'book_tags', type_='foreignkey')
    op.drop_constraint(None, 'book_authors', type_='foreignkey')
    # ### end Alembic commands ###
