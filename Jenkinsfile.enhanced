pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'staffanob'  // Your Docker Hub username
        IMAGE_NAME = 'booklib-api'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        DEPLOYMENT_SERVER = 'your-deployment-server'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh '''
                            python -m venv venv
                            . venv/bin/activate
                            pip install -r requirements.txt
                            pytest tests/unit/ --junitxml=test-results/unit-tests.xml
                        '''
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'test-results/unit-tests.xml'
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            pytest tests/integration/ --junitxml=test-results/integration-tests.xml
                        '''
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'test-results/integration-tests.xml'
                        }
                    }
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Lint') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            pip install flake8
                            flake8 app/ --output-file=lint-results.txt || true
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'lint-results.txt', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            pip install safety
                            safety check --json --output safety-report.json || true
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'safety-report.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                    docker.withRegistry('https://registry-1.docker.io/v2/', DOCKER_CREDENTIALS_ID) {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh '''
                        ssh jenkins@${DEPLOYMENT_SERVER} "
                            cd /opt/booklib-staging &&
                            docker-compose pull &&
                            docker-compose up -d
                        "
                    '''
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to Production?', ok: 'Deploy'
                script {
                    sh '''
                        ssh jenkins@${DEPLOYMENT_SERVER} "
                            cd /opt/booklib-production &&
                            docker-compose pull &&
                            docker-compose up -d
                        "
                    '''
                }
            }
        }
        
        stage('Robot Framework Tests') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                build job: 'booklib-tests-pipeline', 
                      parameters: [
                          string(name: 'TARGET_ENV', value: env.BRANCH_NAME == 'main' ? 'production' : 'staging'),
                          string(name: 'API_VERSION', value: IMAGE_TAG)
                      ],
                      wait: false
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            slackSend channel: '#deployments', 
                     color: 'good',
                     message: "✅ ${env.JOB_NAME} #${env.BUILD_NUMBER} deployed successfully to ${env.BRANCH_NAME}"
        }
        failure {
            slackSend channel: '#deployments', 
                     color: 'danger',
                     message: "❌ ${env.JOB_NAME} #${env.BUILD_NUMBER} failed on ${env.BRANCH_NAME}"
        }
    }
}