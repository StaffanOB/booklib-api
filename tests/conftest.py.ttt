import pytest
from app import create_app
from flask import Flask
from db import db as _db
from models import AuthorModel, BookModel, CategoryModel
from resources.category_list import blp as category_list_blp


@pytest.fixture(scope='module')
def app():
    app = Flask(__name__)
    app.config['TESTING'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['API_TITLE'] = 'Test API'
    app.config['API_VERSION'] = 'v1'
    app.config['OPENAPI_VERSION'] = '3.0.3'
    app.config['OPENAPI_URL_PREFIX'] = '/'
    app.config['OPENAPI_SWAGGER_UI_PATH'] = '/swagger-ui'
    app.config['OPENAPI_SWAGGER_UI_URL'] = 'https://cdn.jsdelivr.net/npm/swagger-ui-dist/'

    _db.init_app(app)

    with app.app_context():
        _db.create_all()

    from flask_smorest import Api
    api = Api(app)
    api.register_blueprint(category_list_blp)

    yield app

    with app.app_context():
        _db.drop_all()


@pytest.fixture(scope='module')
def db(app):
    return _db


@pytest.fixture(scope='module')
def test_client(app):
    flask_app = create_app("sqlite:///:memory:")

    with flask_app.test_client() as client:
        with flask_app.app_context():
            _db.create_all()
            yield client
            _db.drop_all()

# @pytest.fixture
# def client(app):
#    return app.test_client()


@pytest.fixture(scope='module')
def new_author():
    author = AuthorModel(name="Author Name")
    return author


@pytest.fixture(scope='module')
def new_category():
    category = CategoryModel(name="Category Name")
    return category


@pytest.fixture(scope='module')
def new_book(new_author, new_category):
    book = BookModel(title="Book Title")
    return book


@pytest.fixture(scope='module')
def init_database(new_author, new_category, new_book):
    # Create initial test data
    _db.session.add(new_author)
    _db.session.add(new_category)
    _db.session.add(new_book)
    _db.session.commit()
    yield _db
    _db.remove()
