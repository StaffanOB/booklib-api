<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.3.2 (Python 3.12.3 on linux)" generated="2025-09-18T21:23:33.366880" rpa="false" schemaversion="5">
<suite id="s1" name="Booklib-Api Ai" source="/home/staffan/develop/projekts/booklib-api_ai">
<suite id="s1-s1" name="Tests Robot" source="/home/staffan/develop/projekts/booklib-api_ai/tests_robot">
<suite id="s1-s1-s1" name="Api" source="/home/staffan/develop/projekts/booklib-api_ai/tests_robot/api">
<suite id="s1-s1-s1-s1" name="Books" source="/home/staffan/develop/projekts/booklib-api_ai/tests_robot/api/books.robot">
<kw name="Setup User" owner="keywords" type="SETUP">
<kw name="Register User" owner="auth_keywords">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.413024" level="INFO">${payload} = {'username': 'auto_user', 'email': 'auto_user@example.com', 'password': 'testpass'}</msg>
<var>${payload}</var>
<arg>username=${TEST_USER}</arg>
<arg>email=${TEST_EMAIL}</arg>
<arg>password=${TEST_PASS}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.412726" elapsed="0.000361"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.413308" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.413190" elapsed="0.000159"/>
</kw>
<kw name="POST" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.489905" level="INFO">POST Request : url=http://127.0.0.1:5000/users/register 
 path_url=/users/register 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '83'} 
 body=b'{"username": "auto_user", "email": "auto_user@example.com", "password": "testpass"}' 
 </msg>
<msg time="2025-09-18T21:23:33.490076" level="INFO">POST Response : url=http://127.0.0.1:5000/users/register 
 status=201, reason=CREATED 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '31', 'Connection': 'close'} 
 body={
  "msg": "User registered"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.490197" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/users/register</arg>
<arg>headers=${headers}</arg>
<arg>json=${payload}</arg>
<doc>Sends a POST request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.413426" elapsed="0.076819"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.491015" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>201</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.490396" elapsed="0.000962"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.412503" elapsed="0.079046"/>
</kw>
<kw name="Login User" owner="auth_keywords">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.492678" level="INFO">${payload} = {'username': 'auto_user', 'password': 'testpass'}</msg>
<var>${payload}</var>
<arg>username=${TEST_USER}</arg>
<arg>password=${TEST_PASS}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.492257" elapsed="0.000630"/>
</kw>
<kw name="POST" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.567911" level="INFO">POST Request : url=http://127.0.0.1:5000/users/login 
 path_url=/users/login 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '49', 'Content-Type': 'application/json'} 
 body=b'{"username": "auto_user", "password": "testpass"}' 
 </msg>
<msg time="2025-09-18T21:23:33.568021" level="INFO">POST Response : url=http://127.0.0.1:5000/users/login 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '350', 'Connection': 'close'} 
 body={
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.568106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/users/login</arg>
<arg>json=${payload}</arg>
<doc>Sends a POST request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.493056" elapsed="0.075082"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.568537" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.568249" elapsed="0.000346"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.569003" level="INFO">${TOKEN} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImN...</msg>
<arg>${TOKEN}</arg>
<arg>${resp.json()['access_token']}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-09-18T21:23:33.568675" elapsed="0.000375"/>
</kw>
<kw name="Set User Id From Api" owner="auth_keywords">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.569634" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.569464" elapsed="0.000213"/>
</kw>
<kw name="GET" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.571834" level="INFO">GET Request : url=http://127.0.0.1:5000/users 
 path_url=/users 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.571931" level="INFO">GET Response : url=http://127.0.0.1:5000/users 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '173', 'Connection': 'close'} 
 body=[
  {
    "email": "testuser@test.se",
    "id": 1,
    "username": "testuser"
  },
  {
    "email": "auto_user@example.com",
    "id": 2,
    "username": "auto_user"
  }
]
 
 </msg>
<msg time="2025-09-18T21:23:33.572051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.569755" elapsed="0.002356"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.573086" level="INFO">${users} = [{'email': 'auto_user@example.com', 'id': 2, 'username': 'auto_user'}]</msg>
<var>${users}</var>
<arg>[u for u in ${resp.json()} if u['username']=='${TEST_USER}']</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-09-18T21:23:33.572242" elapsed="0.000910"/>
</kw>
<if>
<branch type="IF" condition="not ${users}">
<kw name="Fail" owner="BuiltIn">
<arg>User testuser not found for id lookup</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" start="2025-09-18T21:23:33.573571" elapsed="0.000076"/>
</kw>
<status status="NOT RUN" start="2025-09-18T21:23:33.573343" elapsed="0.000368"/>
</branch>
<status status="PASS" start="2025-09-18T21:23:33.573315" elapsed="0.000441"/>
</if>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.574271" level="INFO">${USER_ID} = 2</msg>
<arg>${USER_ID}</arg>
<arg>${users[0]['id']}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-09-18T21:23:33.573837" elapsed="0.000512"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.569186" elapsed="0.005257"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.491819" elapsed="0.082702"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.412296" elapsed="0.162300"/>
</kw>
<test id="s1-s1-s1-s1-t1" name="Get All Books" line="11">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.576538" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.576299" elapsed="0.000303"/>
</kw>
<kw name="GET" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.578395" level="INFO">GET Request : url=http://127.0.0.1:5000/books 
 path_url=/books 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.578484" level="INFO">GET Response : url=http://127.0.0.1:5000/books 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '321', 'Connection': 'close'} 
 body=[
  {
    "author": "Author Name",
    "description": "Description",
    "id": 1,
    "publish_year": 2025,
    "series": "Series Name",
    "title": "Book Title UPDATED"
  },
  {
    "author": "string",
    "description": "string",
    "id": 2,
    "publish_year": 0,
    "series": "string",
    "title": "string"
  }
]
 
 </msg>
<msg time="2025-09-18T21:23:33.578592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.576787" elapsed="0.001860"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.579215" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.578859" elapsed="0.000440"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.579913" level="INFO">${books} = [{'author': 'Author Name', 'description': 'Description', 'id': 1, 'publish_year': 2025, 'series': 'Series Name', 'title': 'Book Title UPDATED'}, {'author': 'string', 'description': 'string', 'id': 2, ...</msg>
<var>${books}</var>
<arg>${resp.json()}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-09-18T21:23:33.579487" elapsed="0.000482"/>
</kw>
<kw name="Should Be True" owner="BuiltIn">
<arg>isinstance(${books}, list)</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-09-18T21:23:33.580086" elapsed="0.000184"/>
</kw>
<tag>books</tag>
<tag>get</tag>
<status status="PASS" start="2025-09-18T21:23:33.574679" elapsed="0.005681"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Create Book" line="19">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.583003" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.582847" elapsed="0.000197"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.583271" level="INFO">${payload} = {'title': 'Robot Test Book', 'author': 'Test Author', 'description': 'Test Description'}</msg>
<var>${payload}</var>
<arg>title=Robot Test Book</arg>
<arg>author=Test Author</arg>
<arg>description=Test Description</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.583162" elapsed="0.000143"/>
</kw>
<kw name="POST" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.594754" level="INFO">POST Request : url=http://127.0.0.1:5000/books 
 path_url=/books 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU', 'Content-Type': 'application/json', 'Content-Length': '88'} 
 body=b'{"title": "Robot Test Book", "author": "Test Author", "description": "Test Description"}' 
 </msg>
<msg time="2025-09-18T21:23:33.594866" level="INFO">POST Response : url=http://127.0.0.1:5000/books 
 status=201, reason=CREATED 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '44', 'Connection': 'close'} 
 body={
  "id": 3,
  "title": "Robot Test Book"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.594975" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books</arg>
<arg>headers=${headers}</arg>
<arg>json=${payload}</arg>
<doc>Sends a POST request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.583384" elapsed="0.011646"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.595648" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>201</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.595251" elapsed="0.000490"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.596384" level="INFO">${book_id} = 3</msg>
<var>${book_id}</var>
<arg>${resp.json()['id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-09-18T21:23:33.595944" elapsed="0.000504"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.596897" level="INFO">${BOOK_ID} = 3</msg>
<arg>${BOOK_ID}</arg>
<arg>${book_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-09-18T21:23:33.596663" elapsed="0.000307"/>
</kw>
<tag>books</tag>
<tag>create</tag>
<status status="PASS" start="2025-09-18T21:23:33.581732" elapsed="0.015399"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Get Book By Id" line="28">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.605515" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.605321" elapsed="0.000244"/>
</kw>
<kw name="GET" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.608466" level="INFO">GET Request : url=http://127.0.0.1:5000/books/3 
 path_url=/books/3 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.608587" level="INFO">GET Response : url=http://127.0.0.1:5000/books/3 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '150', 'Connection': 'close'} 
 body={
  "author": "Test Author",
  "description": "Test Description",
  "id": 3,
  "publish_year": null,
  "series": null,
  "title": "Robot Test Book"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.608717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books/${BOOK_ID}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.605718" elapsed="0.003055"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.609556" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.609093" elapsed="0.000546"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.610138" level="INFO">${book} = {'author': 'Test Author', 'description': 'Test Description', 'id': 3, 'publish_year': None, 'series': None, 'title': 'Robot Test Book'}</msg>
<var>${book}</var>
<arg>${resp.json()}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-09-18T21:23:33.609809" elapsed="0.000388"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${book['id']}</arg>
<arg>${BOOK_ID}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-09-18T21:23:33.610298" elapsed="0.000245"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${book['title']}</arg>
<arg>${EXPECTED_BOOK_TITLE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-09-18T21:23:33.610622" elapsed="0.000221"/>
</kw>
<tag>books</tag>
<tag>get</tag>
<status status="PASS" start="2025-09-18T21:23:33.602129" elapsed="0.008788"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Update Book" line="37">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.618401" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.618024" elapsed="0.000465"/>
</kw>
<kw name="PUT" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.621530" level="INFO">PUT Request : url=http://127.0.0.1:5000/books/3 
 path_url=/books/3 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU', 'Content-Type': 'application/json', 'Content-Length': '103'} 
 body=b'"Create Dictionary title=Updated Robot Test Book author=Updated Author description=Updated Description"' 
 </msg>
<msg time="2025-09-18T21:23:33.621610" level="INFO">PUT Response : url=http://127.0.0.1:5000/books/3 
 status=500, reason=INTERNAL SERVER ERROR 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '17224', 'Connection': 'close'} 
 body=&lt;!doctype html&gt;
&lt;html lang=en&gt;
  &lt;head&gt;
    &lt;title&gt;TypeError: string indices must be integers, not &amp;#39;str&amp;#39;
 // Werkzeug Debugger&lt;/title&gt;
    &lt;link rel="stylesheet" href="?__debugger__=yes&amp;amp;cmd=resource&amp;amp;f=style.css"&gt;
    &lt;link rel="shortcut icon"
        href="?__debugger__=yes&amp;amp;cmd=resource&amp;amp;f=console.png"&gt;
    &lt;script src="?__debugger__=yes&amp;amp;cmd=resource&amp;amp;f=debugger.js"&gt;&lt;/script&gt;
    &lt;script&gt;
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "6gEsyhtfLcuJtmqb8fNQ";
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body style="background-color: #fff"&gt;
    &lt;div class="debugger"&gt;
&lt;h1&gt;TypeError&lt;/h1&gt;
&lt;div class="detail"&gt;
  &lt;p class="errormsg"&gt;TypeError: string indices must be integers, not &amp;#39;str&amp;#39;
&lt;/p&gt;
&lt;/div&gt;
&lt;h2 class="traceback"&gt;Traceback &lt;em&gt;(most recent call last)&lt;/em&gt;&lt;/h2&gt;
&lt;div class="traceback"&gt;
  &lt;h3&gt;&lt;/h3&gt;
  &lt;ul&gt;&lt;li&gt;&lt;div class="frame" id="frame-123594298366352"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;1536&lt;/em&gt;,
      in &lt;code class="function"&gt;__call__&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;    &lt;/span&gt;) -&amp;gt; cabc.Iterable[bytes]:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;&amp;#34;&amp;#34;&amp;#34;The WSGI server calls the Flask application object as the&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;WSGI application. This calls :meth:`wsgi_app`, which can be&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;wrapped to apply middleware.&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;return self.wsgi_app(environ, start_response)
&lt;span class="ws"&gt;        &lt;/span&gt;       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298368224"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;1514&lt;/em&gt;,
      in &lt;code class="function"&gt;wsgi_app&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;try:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;ctx.push()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;response = self.full_dispatch_request()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;except Exception as e:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;error = e&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;response = self.handle_exception(e)
&lt;span class="ws"&gt;                &lt;/span&gt;           ^^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;except:  # noqa: B001&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;error = sys.exc_info()[1]&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;raise&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;return response(environ, start_response)&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;finally:&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298368656"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;1511&lt;/em&gt;,
      in &lt;code class="function"&gt;wsgi_app&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;ctx = self.request_context(environ)&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;error: BaseException | None = None&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;try:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;try:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;ctx.push()&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;response = self.full_dispatch_request()
&lt;span class="ws"&gt;                &lt;/span&gt;           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;except Exception as e:&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;error = e&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;response = self.handle_exception(e)&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;except:  # noqa: B001&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;error = sys.exc_info()[1]&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298368800"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;919&lt;/em&gt;,
      in &lt;code class="function"&gt;full_dispatch_request&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;request_started.send(self, _async_wrapper=self.ensure_sync)&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;rv = self.preprocess_request()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;if rv is None:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;rv = self.dispatch_request()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;except Exception as e:&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;rv = self.handle_user_exception(e)
&lt;span class="ws"&gt;            &lt;/span&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;return self.finalize_request(rv)&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;&lt;/span&gt; &lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;    &lt;/span&gt;def finalize_request(&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;self,&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;rv: ft.ResponseReturnValue | HTTPException,&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298368944"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;917&lt;/em&gt;,
      in &lt;code class="function"&gt;full_dispatch_request&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;&lt;/span&gt; &lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;try:&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;request_started.send(self, _async_wrapper=self.ensure_sync)&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;rv = self.preprocess_request()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;if rv is None:&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;rv = self.dispatch_request()
&lt;span class="ws"&gt;                &lt;/span&gt;     ^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;except Exception as e:&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;rv = self.handle_user_exception(e)&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;return self.finalize_request(rv)&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;&lt;/span&gt; &lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;    &lt;/span&gt;def finalize_request(&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298369088"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask/app.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;902&lt;/em&gt;,
      in &lt;code class="function"&gt;dispatch_request&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;and req.method == &amp;#34;OPTIONS&amp;#34;&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;):&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;return self.make_default_options_response()&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;# otherwise dispatch to the handler for that endpoint&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
&lt;span class="ws"&gt;        &lt;/span&gt;       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;&lt;/span&gt; &lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;    &lt;/span&gt;def full_dispatch_request(self) -&amp;gt; Response:&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;&amp;#34;&amp;#34;&amp;#34;Dispatches the request and on top of that performs request&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;pre and postprocessing as well as HTTP exception catching and&lt;/pre&gt;
&lt;pre class="line after"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;error handling.&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;li&gt;&lt;div class="frame" id="frame-123594298369232"&gt;
  &lt;h4&gt;File &lt;cite class="filename"&gt;"/home/staffan/develop/projekts/booklib-api_ai/.venv/lib/python3.12/site-packages/flask_jwt_extended/view_decorators.py"&lt;/cite&gt;,
      line &lt;em class="line"&gt;170&lt;/em&gt;,
      in &lt;code class="function"&gt;decorator&lt;/code&gt;&lt;/h4&gt;
  &lt;div class="source library"&gt;&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;@wraps(fn)&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;        &lt;/span&gt;def decorator(*args, **kwargs):&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;verify_jwt_in_request(&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;                &lt;/span&gt;optional, fresh, refresh, locations, verify_type, skip_revocation_check&lt;/pre&gt;
&lt;pre class="line before"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;)&lt;/pre&gt;
&lt;pre class="line current"&gt;&lt;span class="ws"&gt;            &lt;/span&gt;return current_app.ensur... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg time="2025-09-18T21:23:33.621892" level="FAIL">HTTPError: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/books/3</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books/${BOOK_ID}</arg>
<arg>headers=${headers}</arg>
<arg>json=${BOOK_UPDATE_PAYLOAD}</arg>
<doc>Sends a PUT request.</doc>
<status status="FAIL" start="2025-09-18T21:23:33.618613" elapsed="0.005813">HTTPError: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/books/3</status>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" start="2025-09-18T21:23:33.624566" elapsed="0.000054"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${resp_json}</var>
<arg>${resp.json()}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-09-18T21:23:33.624699" elapsed="0.000042"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${resp_json['msg']}</arg>
<arg>Book updated</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" start="2025-09-18T21:23:33.624817" elapsed="0.000042"/>
</kw>
<tag>books</tag>
<tag>update</tag>
<status status="FAIL" start="2025-09-18T21:23:33.612303" elapsed="0.012657">HTTPError: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/books/3</status>
</test>
<test id="s1-s1-s1-s1-t5" name="Get Book Full Info" line="45">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.628338" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.628171" elapsed="0.000209"/>
</kw>
<kw name="GET" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.632242" level="INFO">GET Request : url=http://127.0.0.1:5000/books/3/full 
 path_url=/books/3/full 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.632361" level="INFO">GET Response : url=http://127.0.0.1:5000/books/3/full 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '211', 'Connection': 'close'} 
 body={
  "author": "Test Author",
  "average_rating": null,
  "comments": [],
  "description": "Test Description",
  "id": 3,
  "publish_year": null,
  "ratings": [],
  "series": null,
  "title": "Robot Test Book"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.632471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books/${BOOK_ID}/full</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.628498" elapsed="0.004015"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.633132" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.632715" elapsed="0.000495"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.633642" level="INFO">${book} = {'author': 'Test Author', 'average_rating': None, 'comments': [], 'description': 'Test Description', 'id': 3, 'publish_year': None, 'ratings': [], 'series': None, 'title': 'Robot Test Book'}</msg>
<var>${book}</var>
<arg>${resp.json()}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-09-18T21:23:33.633364" elapsed="0.000318"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${book['id']}</arg>
<arg>${BOOK_ID}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-09-18T21:23:33.633766" elapsed="0.000253"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${book}</arg>
<arg>title</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.634102" elapsed="0.000097"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${book}</arg>
<arg>author</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.634272" elapsed="0.000087"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${book}</arg>
<arg>ratings</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.634427" elapsed="0.000084"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${book}</arg>
<arg>comments</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.634628" elapsed="0.000081"/>
</kw>
<tag>books</tag>
<tag>full</tag>
<tag>get</tag>
<status status="PASS" start="2025-09-18T21:23:33.627078" elapsed="0.007765"/>
</test>
<test id="s1-s1-s1-s1-t6" name="Delete Book" line="57">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.639407" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.639238" elapsed="0.000212"/>
</kw>
<kw name="DELETE" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.652902" level="INFO">DELETE Request : url=http://127.0.0.1:5000/books/3 
 path_url=/books/3 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.653011" level="INFO">DELETE Response : url=http://127.0.0.1:5000/books/3 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '28', 'Connection': 'close'} 
 body={
  "msg": "Book deleted"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.653098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/books/${BOOK_ID}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a DELETE request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.639568" elapsed="0.013563"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.653650" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.653325" elapsed="0.000382"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${resp.text}</arg>
<arg>Book deleted</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.653802" elapsed="0.000231"/>
</kw>
<tag>books</tag>
<tag>delete</tag>
<status status="PASS" start="2025-09-18T21:23:33.638271" elapsed="0.015935"/>
</test>
<kw name="Cleanup User" owner="keywords" type="TEARDOWN">
<kw name="Delete User" owner="auth_keywords">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.656058" level="INFO">${headers} = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiL...</msg>
<var>${headers}</var>
<arg>Authorization=Bearer ${TOKEN}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-09-18T21:23:33.655922" elapsed="0.000176"/>
</kw>
<kw name="DELETE" owner="RequestsLibrary">
<msg time="2025-09-18T21:23:33.666652" level="INFO">DELETE Request : url=http://127.0.0.1:5000/users/2 
 path_url=/users/2 
 headers={'User-Agent': 'python-requests/2.32.5', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc1ODIyMzQxMywianRpIjoiZGZhZGI4OWUtZmJjNC00OGI3LWE2ODEtYTYxNGVlNDQwNDFkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IjIiLCJuYmYiOjE3NTgyMjM0MTMsImNzcmYiOiJhY2IxODg1YS03NmE0LTQyZWItYWYzZi02NDE4ZDBjZjFjMjQiLCJleHAiOjE3NTgyMjQzMTN9.RHRDFljZvEwuEFyApx10gc5nOItC82GBU7Oe09y9BPU', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg time="2025-09-18T21:23:33.666756" level="INFO">DELETE Response : url=http://127.0.0.1:5000/users/2 
 status=200, reason=OK 
 headers={'Server': 'Werkzeug/3.1.3 Python/3.12.3', 'Date': 'Thu, 18 Sep 2025 19:23:33 GMT', 'Content-Type': 'application/json', 'Content-Length': '28', 'Connection': 'close'} 
 body={
  "msg": "User deleted"
}
 
 </msg>
<msg time="2025-09-18T21:23:33.666866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>${BASE_URL}/users/${USER_ID}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a DELETE request.</doc>
<status status="PASS" start="2025-09-18T21:23:33.656165" elapsed="0.010734"/>
</kw>
<kw name="Should Be Equal As Integers" owner="BuiltIn">
<msg time="2025-09-18T21:23:33.667340" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${resp.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" start="2025-09-18T21:23:33.667010" elapsed="0.000408"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${resp.text}</arg>
<arg>User deleted</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-09-18T21:23:33.667497" elapsed="0.000228"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.655808" elapsed="0.011975"/>
</kw>
<status status="PASS" start="2025-09-18T21:23:33.655662" elapsed="0.012168"/>
</kw>
<status status="FAIL" start="2025-09-18T21:23:33.387022" elapsed="0.280840"/>
</suite>
<status status="FAIL" start="2025-09-18T21:23:33.381851" elapsed="0.287643"/>
</suite>
<status status="FAIL" start="2025-09-18T21:23:33.380161" elapsed="0.290389"/>
</suite>
<status status="FAIL" start="2025-09-18T21:23:33.368979" elapsed="0.302622"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="1" skip="0">books</stat>
<stat pass="1" fail="0" skip="0">create</stat>
<stat pass="1" fail="0" skip="0">delete</stat>
<stat pass="1" fail="0" skip="0">full</stat>
<stat pass="3" fail="0" skip="0">get</stat>
<stat pass="0" fail="1" skip="0">update</stat>
</tag>
<suite>
<stat name="Booklib-Api Ai" id="s1" pass="5" fail="1" skip="0">Booklib-Api Ai</stat>
<stat name="Tests Robot" id="s1-s1" pass="5" fail="1" skip="0">Booklib-Api Ai.Tests Robot</stat>
<stat name="Api" id="s1-s1-s1" pass="5" fail="1" skip="0">Booklib-Api Ai.Tests Robot.Api</stat>
<stat name="Books" id="s1-s1-s1-s1" pass="5" fail="1" skip="0">Booklib-Api Ai.Tests Robot.Api.Books</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
